name: Building Wheels

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - aki/manylinux

concurrency:
  group: aki_hobby
  cancel-in-progress: true

jobs:
  wheel:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - {os: ubuntu-22.04, torch-version: '2.6.0', python-version: '3.11', cuda-version: 'cpu'}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Always use 3.11+ as recommended by cibuildwheel

      - name: Prepare for building
        run: |
          VERSION=`sed -n "s/^__version__ = '\(.*\)'/\1/p" pyg_lib/__init__.py`
          TORCH_VERSION=`echo "pt${{ matrix.torch-version }}" | sed "s/..$//" | sed "s/\.//g"`
          CUDA_VERSION=`echo ${{ matrix.cuda-version }}`
          echo "New version name: $VERSION+$TORCH_VERSION$CUDA_VERSION"
          sed -i "s/$VERSION/$VERSION+$TORCH_VERSION$CUDA_VERSION/" setup.py
          sed -i "s/$VERSION/$VERSION+$TORCH_VERSION$CUDA_VERSION/" pyg_lib/__init__.py
        shell: bash

      - name: Build wheel
        run: |
          source ./.github/workflows/cuda/${{ runner.os }}-env.sh ${{ matrix.cuda-version }}
          pip install build cibuildwheel -U
          python -m cibuildwheel --output-dir dist
          # python -m build --wheel --no-isolation --outdir dist
        shell: bash
        env:
          CIBW_BUILD: cp311-manylinux_x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          # Install system library
          CIBW_BEFORE_BUILD_LINUX: (yum install -y libffi-devel || apt-get install -y libffi-devel || apk add --update --no-cache libffi-devel || true) && (yum install -y libc6 || apt-get install -y libc6 || apk add --update --no-cache libc6 || true) && (bash ./tools/prepare_for_build.sh ${{ matrix.torch-version }} ${{ matrix.cuda-version }})
          # CIBW_SKIP: "*musllinux*"

      - name: Test wheel
        working-directory: dist
        run: |
          ls -lah
          pip install auditwheel
          auditwheel repair *.whl

          pip install *.whl
          python -c "import pyg_lib; print('pyg-lib:', pyg_lib.__version__)"
          python -c "import pyg_lib; print('CUDA:', pyg_lib.cuda_version())"
        shell: bash

      # - name: Configure AWS
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-west-1

      # - name: Upload wheel
      #   run: |
      #     aws s3 sync dist s3://data.pyg.org/whl/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
