name: Build and Push Docker Image

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - aki/manylinux0
  pull_request:

jobs:
  wheel:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - {torch-version: 2.7.0, cuda-version: cu128, python-version: '3.13'}
          - {torch-version: 2.7.0, cuda-version: cu128, python-version: '3.12'}
          - {torch-version: 2.7.0, cuda-version: cu128, python-version: '3.11'}
          - {torch-version: 2.7.0, cuda-version: cu128, python-version: '3.10'}
          - {torch-version: 2.7.0, cuda-version: cu128, python-version: '3.9'}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Free up disk space
        if: ${{ runner.os == 'Linux' }}
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
          tool-cache: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --progress-bar off cibuildwheel auditwheel

      # - name: Set version
      #   run: |
      #     VERSION=`sed -n "s/^__version__ = '\(.*\)'/\1/p" pyg_lib/__init__.py`
      #     TORCH_VERSION=`echo "pt${{ matrix.torch-version }}" | sed "s/..$//" | sed "s/\.//g"`
      #     CUDA_VERSION=`echo ${{ matrix.cuda-version }}`
      #     echo "New version name: $VERSION+$TORCH_VERSION$CUDA_VERSION"
      #     sed -i "s/$VERSION/$VERSION+$TORCH_VERSION$CUDA_VERSION/" setup.py
      #     sed -i "s/$VERSION/$VERSION+$TORCH_VERSION$CUDA_VERSION/" pyg_lib/__init__.py
      #   shell: bash

      - name: Build wheel
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_ENVIRONMENT: "FORCE_CUDA=1 TORCH_CUDA_ARCH_LIST=9.0 CUDA_HOME=/usr/local/cuda"
          CIBW_BUILD_FRONTEND: "build; args: --no-isolation"
          CIBW_BUILD: cp311-manylinux_x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/manylinux:cu128

      - name: Test wheel
        run: |
          auditwheel show dist/*.whl
          cd dist
          ls -lah
          pip install *.whl
          python -c "import pyg_lib; print('pyg-lib:', pyg_lib.__version__)"
          python -c "import pyg_lib; print('CUDA:', pyg_lib.cuda_version())"
          cd ..
        shell: bash

      # - name: Configure AWS
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-west-1

      # - name: Upload wheel
      #   run: |
      #     aws s3 sync dist s3://data.pyg.org/whl/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
