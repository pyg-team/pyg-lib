name: pull

on:  # yamllint disable-line rule:truthy
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ startsWith(github.ref, 'refs/pull/') || github.run_number }}  # yamllint disable-line
  # Only cancel intermediate builds if on a PR:
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  trigger:
    runs-on: ubuntu-latest
    outputs:
      linux-matrix: ${{ steps.set-matrix.outputs.linux-matrix }}
      linux-trigger: ${{ steps.set-matrix.outputs.linux-trigger }}
      macos-matrix: ${{ steps.set-matrix.outputs.macos-matrix }}
      macos-trigger: ${{ steps.set-matrix.outputs.macos-trigger }}
      windows-matrix: ${{ steps.set-matrix.outputs.windows-matrix }}
      windows-trigger: ${{ steps.set-matrix.outputs.windows-trigger }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure matrix
        id: set-matrix
        run: |
          if [ ${{ github.event_name }} = 'pull_request' ]; then
            if [ ${{ contains(github.event.pull_request.labels.*.name, 'ci: full') }} == 'true' ]; then
              matrix_type="full"
            else
              matrix_type="minimal"
            fi
          else
            matrix_type="full"
          fi

          # Set Linux matrix
          filename=".github/workflows/utils/${matrix_type}_matrix_linux.json"
          matrix=$(jq '[.[] | { "torch-version": .["torch-version"], "python-version": .["python-version"][], "cuda-version": .["cuda-version"][] }]' $filename)
          echo "linux-matrix=$matrix" >> $GITHUB_OUTPUT
          echo "linux-matrix=$matrix"
          trigger=${{ contains(github.event.pull_request.labels.*.name, 'os: linux') }}
          echo "linux-trigger=$trigger" >> $GITHUB_OUTPUT
          echo "linux-trigger=$trigger"

          # Set macOS matrix
          filename=".github/workflows/utils/${matrix_type}_matrix_macos.json"
          matrix=$(jq '[.[] | { "torch-version": .["torch-version"], "python-version": .["python-version"][], "cuda-version": .["cuda-version"][] }]' $filename)
          echo "macos-matrix=$matrix" >> $GITHUB_OUTPUT
          echo "macos-matrix=$matrix"
          trigger=${{ contains(github.event.pull_request.labels.*.name, 'os: macos') }}
          echo "macos-trigger=$trigger" >> $GITHUB_OUTPUT
          echo "macos-trigger=$trigger"

          # Set Windows matrix
          filename=".github/workflows/utils/${matrix_type}_matrix_windows.json"
          matrix=$(jq '[.[] | { "torch-version": .["torch-version"], "python-version": .["python-version"][], "cuda-version": .["cuda-version"][] }]' $filename)
          echo "windows-matrix=$matrix" >> $GITHUB_OUTPUT
          echo "windows-matrix=$matrix"
          trigger=${{ contains(github.event.pull_request.labels.*.name, 'os: windows') }}
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            trigger=true
          fi
          echo "windows-trigger=$trigger" >> $GITHUB_OUTPUT
          echo "windows-trigger=$trigger"

  linux:
    needs: [trigger]
    if: ${{ needs.trigger.outputs.linux-trigger == 'true' }}
    uses: ./.github/workflows/_build_linux.yml
    with:
      test-matrix: ${{ needs.trigger.outputs.linux-matrix }}

  macos:
    needs: [trigger]
    if: ${{ needs.trigger.outputs.macos-trigger == 'true' }}
    uses: ./.github/workflows/_build_macos.yml
    with:
      test-matrix: ${{ needs.trigger.outputs.macos-matrix }}

  windows:
    needs: [trigger]
    if: ${{ needs.trigger.outputs.windows-trigger == 'true' }}
    uses: ./.github/workflows/_build_windows.yml
    with:
      test-matrix: ${{ needs.trigger.outputs.windows-matrix }}

  status:
    needs: [trigger, linux, macos, windows]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Fail if any build failed or cancelled
        if: ${{ contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'cancelled') }}
        run: |
          echo "One or more builds failed or cancelled:"
          echo "trigger: ${{ needs.trigger.result }}"
          echo "linux: ${{ needs.linux.result }}"
          echo "macos: ${{ needs.macos.result }}"
          echo "windows: ${{ needs.windows.result }}"
          exit 1
