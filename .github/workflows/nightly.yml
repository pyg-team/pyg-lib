name: Nightly Wheels

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * *"  # Everyday at 4:00am UTC/8:00pm PST

jobs:

  wheel:
    if: github.repository == 'pyg-team/pyg-lib'
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        torch-version: [1.11.0, 1.12.0, 1.13.0, 2.0.0]
        cuda-version: ['cpu', 'cu113', 'cu115', 'cu116', 'cu117', 'cu118']
        exclude:
          - torch-version: 1.11.0
            python-version: '3.11'
          - torch-version: 1.11.0
            cuda-version: 'cu116'
          - torch-version: 1.11.0
            cuda-version: 'cu117'
          - torch-version: 1.11.0
            cuda-version: 'cu118'
          - torch-version: 1.12.0
            python-version: '3.11'
          - torch-version: 1.12.0
            cuda-version: 'cu115'
          - torch-version: 1.12.0
            cuda-version: 'cu117'
          - torch-version: 1.12.0
            cuda-version: 'cu118'
          - torch-version: 1.13.0
            python-version: '3.11'
          - torch-version: 1.13.0
            cuda-version: 'cu113'
          - torch-version: 1.13.0
            cuda-version: 'cu115'
          - torch-version: 1.13.0
            cuda-version: 'cu118'
          - torch-version: 2.0.0
            cuda-version: 'cu113'
          - torch-version: 2.0.0
            cuda-version: 'cu115'
          - torch-version: 2.0.0
            cuda-version: 'cu116'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup packages
        uses: ./.github/actions/setup
        with:
          python-version: ${{ matrix.python-version }}
          torch-version: ${{ matrix.torch-version }}
          cuda-version: ${{ matrix.cuda-version }}

      - name: Set version on non-macOS
        if: ${{ runner.os != 'macOS' }}
        run: |
          VERSION=`sed -n "s/^__version__ = '\(.*\)'/\1/p" pyg_lib/__init__.py`
          TORCH_VERSION=`echo "pt${{ matrix.torch-version }}" | sed "s/..$//" | sed "s/\.//g"`
          CUDA_VERSION=`echo ${{ matrix.cuda-version }}`
          TODAY=`date +'%Y%m%d'`
          echo "New version name: $VERSION.dev$TODAY+$TORCH_VERSION$CUDA_VERSION"
          sed -i "s/$VERSION/$VERSION.dev$TODAY+$TORCH_VERSION$CUDA_VERSION/" setup.py
          sed -i "s/$VERSION/$VERSION.dev$TODAY+$TORCH_VERSION$CUDA_VERSION/" pyg_lib/__init__.py
        shell: bash

      - name: Set version on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          VERSION=`sed -n "s/^__version__ = '\(.*\)'/\1/p" pyg_lib/__init__.py`
          TORCH_VERSION=`echo "pt${{ matrix.torch-version }}" | sed "s/..$//" | sed "s/\.//g"`
          TODAY=`date +'%Y%m%d'`
          echo "New version name: $VERSION.dev$TODAY+$TORCH_VERSION"
          sed -i "" "s/$VERSION/$VERSION.dev$TODAY+$TORCH_VERSION/" setup.py
          sed -i "" "s/$VERSION/$VERSION.dev$TODAY+$TORCH_VERSION/" pyg_lib/__init__.py
        shell: bash

      - name: Build wheel
        run: |
          source ./.github/workflows/cuda/${{ runner.os }}-env.sh ${{ matrix.cuda-version }}
          python setup.py bdist_wheel --dist-dir=dist
        shell: bash

      - name: Test wheel
        run: |
          cd dist
          ls -lah
          pip install *.whl
          python -c "import pyg_lib; print('pyg-lib:', pyg_lib.__version__)"
          python -c "import pyg_lib; print('CUDA:', pyg_lib.cuda_version())"
          cd ..

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Upload wheel
        run: |
          aws s3 sync dist s3://data.pyg.org/whl/nightly/torch-${{ matrix.torch-version }}+${{ matrix.cuda-version }} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers

  boto3:
    if: ${{ always() }}
    needs: [wheel]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install boto3

      - name: Upload index
        run: |
          python ./.github/workflows/aws/upload_nightly_index.py
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
